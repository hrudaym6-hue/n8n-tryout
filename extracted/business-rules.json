{
<<<<<<< HEAD
  "file": "n8n-tryout/extracted/COUSR02C_sample.cbl",
  "rules": [
    {
      "description": "If the customer code is not found in master file, display Customer Not Found message and terminate process.",
      "type": "validation",
      "condition": "customer code is not found in customer master file",
      "outcome": "display message Customer Not Found and terminate process",
      "location": { "function": "COUSR02C-PROCESS", "line": 75 },
      "variablesInvolved": ["CUSTOMER-CODE", "CUSTOMER-MASTER-FILE", "CUSTOMER-NOT-FOUND"],
      "isConfigurable": false,
      "relatedDomainConcepts": ["Customer", "Customer Master"]
    },
    {
      "description": "If the customer account is blocked, display a warning and prevent further processing.",
      "type": "validation",
      "condition": "customer account is marked as blocked",
      "outcome": "display warning and prevent customer transaction processing",
      "location": { "function": "COUSR02C-PROCESS", "line": 92 },
      "variablesInvolved": ["BLOCKED-FLAG", "CUSTOMER-CODE"],
      "isConfigurable": false,
      "relatedDomainConcepts": ["Customer", "Account Status"]
    },
    {
      "description": "If total transaction amount exceeds credit limit, display error and halt execution.",
      "type": "validation",
      "condition": "total transaction amount > customer credit limit",
      "outcome": "display error and stop processing",
      "location": { "function": "COUSR02C-PROCESS", "line": 110 },
      "variablesInvolved": ["TRANSACTION-AMOUNT", "CREDIT-LIMIT"],
      "isConfigurable": true,
      "relatedDomainConcepts": ["Customer", "Credit Limit", "Transaction"]
    },
    {
      "description": "Calculate available balance after each approved transaction.",
      "type": "calculation",
      "condition": "on successful transaction approval",
      "outcome": "deduct transaction amount from available balance",
      "location": { "function": "COUSR02C-UPDATE-BALANCE", "line": 128 },
      "variablesInvolved": ["AVAILABLE-BALANCE", "TRANSACTION-AMOUNT"],
      "isConfigurable": false,
      "relatedDomainConcepts": ["Customer", "Balance", "Transaction"]
    },
    {
      "description": "If the transaction date is prior to the current system date, display error and skip transaction.",
      "type": "validation",
      "condition": "transaction date < current system date",
      "outcome": "display error and skip processing of the transaction",
      "location": { "function": "COUSR02C-PROCESS", "line": 145 },
      "variablesInvolved": ["TRANSACTION-DATE", "SYSTEM-DATE"],
      "isConfigurable": false,
      "relatedDomainConcepts": ["Transaction", "Date Validation"]
    }
=======
  "rules": [
    { "rule": "If ORDER-AMOUNT is not greater than zero, reject order.", "condition": "ORDER-AMOUNT <= 0", "action": "Reject order" },
    { "rule": "If PRODUCT-CODE does not exist in PRODUCT-MASTER, reject product line.", "condition": "PRODUCT-CODE not in PRODUCT-MASTER", "action": "Reject line" },
    { "rule": "If SHIPPING-DATE earlier than ORDER-DATE, abort transaction.", "condition": "SHIPPING-DATE < ORDER-DATE", "action": "Abort" },
    { "rule": "If ORDER-QTY exceeds INVENTORY-QTY, prohibit order.", "condition": "ORDER-QTY > INVENTORY-QTY", "action": "Prohibit order" },
    { "rule": "If CUSTOMER-ID invalid, halt processing.", "condition": "CUSTOMER-ID not matches ^[0-9]{8}$", "action": "Halt" },
    { "rule": "Employee ID must be present in all employee operations.", "condition": "EMPLOYEE-ID is NULL", "action": "Reject operation" }
>>>>>>> 7e856f8 (Backend: Node.js + Postgres implementation with extracted entities, business rules, and validation rules)
  ]
}
